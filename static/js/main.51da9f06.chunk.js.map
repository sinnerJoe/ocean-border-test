{"version":3,"sources":["shared/utils.ts","components/stock-chart/StockChart.tsx","shared/requests.ts","shared/storage.ts","components/symbol-input/SymbolInput.tsx","components/config-panel/ConfigPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sum","values","reduce","acc","v","generateRange","start","end","date","day","moment","set","days","isBefore","add","push","aggregateData","startDate","endDate","data","range","chart","result","timestamp","indicators","quote","high","low","open","volume","close","dayStatistics","timestampIndex","statistics","lows","sells","highs","time","format","length","unix","Object","some","val","Array","isArray","every","index","separateDataByDays","map","tradedAmounts","totalTrades","averagePrice","Math","min","max","avg","aggregateStatistics","aggregateLabels","red","blue","axisStrokeColor","margin","tooltipStyles","defaultStyles","minWidth","backgroundColor","color","StockChart","width","height","displayAverages","useMemo","computedKeys","keys","colorScale","scaleOrdinal","domain","aggregateDataScale","scaleBand","padding","useKeyScales","tooltipTimeout","useRef","intervalScale","interval","priceScale","scaleLinear","nice","useTooltip","tooltipOpen","tooltipLeft","tooltipTop","hideTooltip","showTooltip","tooltipData","useTooltipInPortal","scroll","containerRef","TooltipInPortal","xMax","yMax","rangeRound","bandwidth","className","ref","fill","x","y","Group","top","BarGroup","x0","yScale","x0Scale","x1Scale","barGroups","barGroup","left","bars","bar","onMouseLeave","current","setTimeout","onMouseMove","event","clearTimeout","eventSvgCoords","localPoint","key","AxisBottom","scale","stroke","tickStroke","tickLabelProps","fontSize","textAnchor","AxisLeft","hideZero","style","position","display","justifyContent","labelFormat","value","direction","labelMargin","toFixed","get","url","params","fullParams","storedResponse","storedValue","localStorage","getItem","JSON","stringify","parse","retreiveResponse","Promise","resolve","axios","headers","then","response","undefined","setItem","storeResponse","initialOptions","label","insensitiveIncludes","str","sub","toLowerCase","includes","SymbolInput","props","useState","options","setOptions","loading","setLoading","handleSearch","useDebouncedCallback","text","searchTerm","term","find","optionExists","q","region","newOptions","quotes","longname","shortname","symbol","autocompleteToOptions","currentOptions","optionMap","Map","option","from","concatOptions","callback","showSearch","placeholder","onSearch","filterOption","input","RangePicker","DatePicker","Item","Form","useForm","ConfigPanel","form","layout","onFinish","onSubmit","resetFields","initialValues","config","name","rules","validator","rule","diff","reject","showNow","showTime","icon","SearchOutlined","type","htmlType","Text","Typography","now","subtract","flip","state","App","setQuotes","setConfig","useReducer","changeDisplayAverages","chartContainer","fetchData","period1","period2","useEffect","align","span","lg","xl","ParentSize","window","innerHeight","strong","onChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51da9f06.chunk.js","sourcesContent":["import moment, { Moment } from 'moment'\nimport { QuoteRequestResponse } from './requests';\nimport {QuoteInterval} from './types';\n\nfunction sum(values: number[]) {\n    return values.reduce((acc, v) => acc + v, 0);\n}\n\nfunction getDayStart(date: Moment) {\n    return moment(date).set('s', 0).set('m', 0).set('h', 0);\n}\n\nfunction getDayEnd(date: Moment) {\n    return moment(date).set('s', 59).set('m', 59).set('h', 23);\n}\n\nfunction generateRange(start: Moment, end: Moment) {\n    let day = getDayEnd(start);\n    const days = [];\n    while (day.isBefore(end)) {\n        day = moment(day).add(1, 'day');\n        days.push(day);\n    }\n\n    return days;\n}\n\ninterface DayStats {\n    sells: number[],\n    highs: number[],\n    lows: number[],\n    volume: number[],\n    time: string\n}\n\nfunction separateDataByDays(startDate: Moment, endDate: Moment, data: QuoteRequestResponse): DayStats[] {\n    const range = generateRange(startDate, endDate);\n    const { timestamp, indicators: { quote: [{ high, low, open, close, volume }] } } = data.chart.result[0];\n\n    const dayStatistics: DayStats[] = [];\n\n    let timestampIndex = 0;\n    for (const day of range) {\n        const statistics: DayStats = {\n            lows: [],\n            sells: [],\n            highs: [],\n            volume: [],\n            time: day.format('DD MMM')\n        }\n        while (timestampIndex < timestamp.length && day.unix() > timestamp[timestampIndex]) {\n            statistics.lows.push(low[timestampIndex]);\n            statistics.sells.push(open[timestampIndex]);\n            statistics.highs.push(high[timestampIndex]);\n            statistics.volume.push(volume[timestampIndex]);\n            timestampIndex++;\n        }\n        // remove days without any tradings\n        if(Object.values(statistics).some(val => Array.isArray(val) && val.length)) {\n            if(statistics.volume.every(v => v == 0)) {\n                for(const index in statistics.volume) {\n                    statistics.volume[index] = 1;\n                }\n            }\n            dayStatistics.push(statistics);\n        }\n    }\n\n    return dayStatistics\n}\n\nfunction aggregateStatistics(volume: number[], sells: number[], lows: number[], highs: number[]) {\n\n    const tradedAmounts = volume.map((v, index) => sells[index] * v);\n\n    const totalTrades = sum(volume)\n\n    const averagePrice = sum(tradedAmounts) / totalTrades;\n\n    const minimumPrice = Math.min(...lows);\n    const maximumPrice = Math.max(...highs);\n\n    return {\n        low: minimumPrice,\n        high: maximumPrice,\n        avg: averagePrice\n    }\n}\n\nexport function aggregateData(startDate: Moment, endDate: Moment, data: QuoteRequestResponse): QuoteInterval[] {\n\n    const dailyStats = separateDataByDays(startDate, endDate, data);\n\n    const aggregatedDailyStats = dailyStats.map(({ highs, lows, sells, volume, time }) => ({\n        ...aggregateStatistics(volume, sells, lows, highs),\n        time\n    }));\n\n\n    return aggregatedDailyStats;\n}\n","import React, { useMemo, useRef } from 'react';\nimport { scaleBand, scaleLinear, scaleOrdinal, useTooltip, useTooltipInPortal, Group, BarGroup, LegendOrdinal } from '@visx/visx';\nimport { defaultStyles } from '@visx/tooltip';\nimport { SeriesPoint, BarGroupBar } from '@visx/shape/lib/types';\nimport { localPoint } from '@visx/event';\nimport { AxisBottom, AxisLeft } from '@visx/axis';\nimport {QuoteInterval} from '../../shared/types';\nimport './StockChart.scss';\n\ntype AggregateQuotes = 'high' | 'low' | 'avg';\n\ntype TooltipData = BarGroupBar<AggregateQuotes>;\n\n\nexport interface StockChartProps {\n    data: QuoteInterval[],\n    width?: number,\n    height?: number,\n    displayAverages?: boolean\n}\nexport type BarStackProps = {\n    width: number;\n    height: number;\n    margin?: { top: number; right: number; bottom: number; left: number };\n    events?: boolean;\n};\n\nconst aggregateLabels: Record<AggregateQuotes, string> = {\n    avg: 'Average',\n    high: 'High',\n    low: 'Low'\n}\n\nconst red = '#fa541c';\nconst blue = '#1890ff';\nconst orange = '#fadb14';\n\nconst axisStrokeColor = '#8c8c8c';\n\nexport const background = '#eaedff';\nconst margin = { top: 40, right: 0, bottom: 0, left: 0 };\nconst tooltipStyles = {\n    ...defaultStyles,\n    minWidth: 60,\n    backgroundColor: 'rgba(0,0,0,0.9)',\n    color: 'white',\n};\n\n\nconst useKeyScales = (displayAverages: boolean) => {\n    return useMemo(() => {\n        const computedKeys: AggregateQuotes[] = displayAverages ? ['low', 'avg', 'high'] : ['low', 'high'];\n        const computedColorScale = scaleOrdinal<AggregateQuotes, string>({\n            domain: computedKeys,\n            range: displayAverages ? [red, orange, blue] : [red, blue]\n        });\n        const computedAggregateDataScale = scaleBand<AggregateQuotes>({\n            domain: computedKeys,\n            padding: 0.1\n        });\n        return {\n            keys: computedKeys,\n            colorScale: computedColorScale,\n            aggregateDataScale: computedAggregateDataScale\n        }\n    }, [displayAverages])\n}\n\n\nexport default function StockChart({ data, width = 800, height = 600, displayAverages = false }: StockChartProps) {\n\n    const { keys, colorScale, aggregateDataScale } = useKeyScales(displayAverages);\n    const tooltipTimeout = useRef<any>(null)\n\n    // scales\n    const intervalScale = scaleBand<string>({\n        domain: data.map(interval => interval.time),\n        padding: 0.2,\n    });\n\n    const priceScale = scaleLinear<number>({\n        domain: [0, Math.max(...data.map(interval => interval.high))],\n        nice: true,\n    });\n\n\n    const {\n        tooltipOpen,\n        tooltipLeft,\n        tooltipTop,\n        hideTooltip,\n        showTooltip,\n        tooltipData\n    } = useTooltip<TooltipData>();\n\n    const { containerRef, TooltipInPortal } = useTooltipInPortal({ scroll: true })\n\n    const xMax = width;\n    const yMax = height - margin.top - 50\n    intervalScale.rangeRound([0, xMax]);\n    priceScale.range([yMax, 0]);\n    aggregateDataScale.rangeRound([0, intervalScale.bandwidth()])\n\n    return (\n        <div className=\"stock-chart\">\n            <svg ref={containerRef} width={width} height={height} fill={\"white\"}>\n                <rect x={0} y={0} width={width} height={height} />\n                <Group top={margin.top}>\n                    <BarGroup\n                        data={data}\n                        keys={keys}\n                        x0={(interval) => interval.time}\n                        yScale={priceScale}\n                        x0Scale={intervalScale}\n                        x1Scale={aggregateDataScale}\n                        color={colorScale}\n                        height={yMax}\n                    >\n                        {barGroups =>\n                            barGroups.map((barGroup) =>\n                                <Group key={`${barGroup.index}`} left={barGroup.x0}>\n                                    {\n                                        barGroup.bars.map(bar => (\n                                            <rect\n                                                key={`${barGroup.index}-${bar.x}-${bar.index}-${bar.key}`}\n                                                x={bar.x}\n                                                y={bar.y}\n                                                height={bar.height}\n                                                width={bar.width + 5}\n                                                fill={bar.color}\n                                                onMouseLeave={() => {\n                                                    tooltipTimeout.current = setTimeout(() => {\n                                                        hideTooltip();\n                                                    }, 300);\n                                                }}\n                                                onMouseMove={event => {\n                                                    if (tooltipTimeout.current) clearTimeout(tooltipTimeout.current);\n                                                    const eventSvgCoords = localPoint(event);\n                                                    const left = bar.x + barGroup.x0 + bar.width / 2;\n                                                    showTooltip({\n                                                        tooltipData: bar,\n                                                        tooltipTop: eventSvgCoords?.y,\n                                                        tooltipLeft: left,\n                                                    });\n                                                }}\n                                            />\n                                        ))\n                                    }\n                                </Group>\n                            )\n                        }\n                    </BarGroup>\n\n                </Group>\n                <AxisBottom\n                    top={yMax + margin.top}\n                    scale={intervalScale}\n                    stroke={axisStrokeColor}\n                    tickStroke={axisStrokeColor}\n                    tickLabelProps={() => ({\n                        fill: \"black\",\n                        fontSize: 11,\n                        textAnchor: 'middle',\n                    })}\n                />\n                <AxisLeft\n                    left={margin.left + 30}\n                    top={margin.top}\n                    scale={priceScale}\n                    stroke={axisStrokeColor}\n                    tickStroke={axisStrokeColor}\n                    hideZero\n                />\n            </svg>\n            <div\n                style={{\n                    position: 'absolute',\n                    top: margin.top / 2 - 10,\n                    width: '100%',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    fontSize: '14px',\n                }}\n            >\n                <LegendOrdinal labelFormat={(value) => {\n                        return aggregateLabels[value as AggregateQuotes]\n                    }} scale={colorScale} direction=\"row\" labelMargin=\"0 15px 0 0\" />\n            </div>\n            {tooltipOpen && tooltipData && (\n                <TooltipInPortal top={tooltipTop} left={tooltipLeft} style={tooltipStyles}>\n                    <div style={{ color: tooltipData.color }}>\n                        <strong>{aggregateLabels[tooltipData.key]}</strong>\n                    </div>\n                    <div>{tooltipData.value.toFixed(2)}$</div>\n                </TooltipInPortal>\n            )}\n        </div >\n    )\n}","import axios from 'axios';\nimport { retreiveResponse, storeResponse } from \"../shared/storage\";\n\n\n\nfunction get<P = any, R = any>(url: string, params: P) {\n    const fullParams = { ...params, url };\n    const storedResponse = retreiveResponse(fullParams);\n\n    if (storedResponse) {\n        return Promise.resolve(storedResponse as R);\n    }\n\n    return axios.get<P, { data: R }>(url, {\n        params,\n        headers: {\n            \"x-rapidapi-key\": \"ddac0762b2mshf2a1e97a045686ep1ee811jsn9c89f803eddf\",\n            \"x-rapidapi-host\": \"apidojo-yahoo-finance-v1.p.rapidapi.com\",\n        }\n    }).then((response) => {\n        storeResponse(fullParams, response.data);\n        return response.data;\n    })\n}\n\ninterface QuoteRequestParams {\n    region?: string,\n    period1?: number,\n    period2?: number,\n    symbol: string,\n}\n\nexport interface QuoteRequestResponse {\n    chart: {\n        result: {\n            timestamp: number[],\n            meta: {\n                currency: string,\n                symbol: string,\n            },\n            indicators: {\n                quote: {\n                    high: number[],\n                    low: number[],\n                    open: number[],\n                    close: number[],\n                    volume: number[],\n                }[],\n            }\n        }[]\n    }\n}\n\nexport function fetchQuotes(params: QuoteRequestParams) {\n    return get<QuoteRequestParams, QuoteRequestResponse>('https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart', params)\n}\n\n\nexport interface AutocompleteResponse {\n    quotes: {\n        shortname: string,\n        longname: string,\n        symbol: string\n    }[]\n}\n\nexport function autocompleteSymbol(searchTerm: string) {\n    return get('https://apidojo-yahoo-finance-v1.p.rapidapi.com/auto-complete', {q: searchTerm, region: 'US'})\n}","\nexport function storeResponse<T = any>(params: any, data: T) {\n    const value = JSON.stringify(data, undefined, 2);\n    const key = JSON.stringify(params);\n    \n    localStorage.setItem(key, value);\n}\n\nexport function retreiveResponse<T = any>(params: any): T | null {\n    const storedValue = localStorage.getItem(JSON.stringify(params));\n    if(!storedValue) {\n        return null;\n    }\n    return JSON.parse(storedValue);\n}","import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport {useDebouncedCallback} from 'use-debounce';\nimport { Input, Select } from 'antd';\n\nimport { autocompleteSymbol, AutocompleteResponse } from '../../shared/requests'\n\n\nconst initialOptions = [\n    {\n        value: 'AMD',\n        label: 'AMD'\n    }\n];\n\ninterface Option {\n    value: string, \n    label: string\n}\n\nfunction insensitiveIncludes(str: string, sub: string) {\n    return str.toLowerCase().includes(sub.toLowerCase());\n}\n\nconst optionExists = (options: Option[], term: string) => {\n    return options.find(({value, label}) => insensitiveIncludes(value, term) || insensitiveIncludes(label, term))\n}\n\nconst autocompleteToOptions = (response: AutocompleteResponse) => {\n    return response.quotes.map(({longname, shortname, symbol}) => ({\n        value: symbol,\n        label: `${shortname || longname} (${symbol})`\n    }))\n}\n\n\nconst concatOptions = (currentOptions: Option[], newOptions: Option[]): Option[] => {\n    const optionMap = new Map();\n    for(const option of currentOptions) {\n        optionMap.set(option.value, option);\n    }\n    for(const option of newOptions) {\n        optionMap.set(option.value, option);\n    }\n    return Array.from(optionMap.values());\n}\n\nexport interface SymbolInputProps extends React.ComponentProps<typeof Select> {\n\n};\n\nexport default function SymbolInput(props: SymbolInputProps) {\n\n    const [options, setOptions] = useState(initialOptions)\n    const [loading, setLoading] = useState(false);\n\n    const search = (text: string) => {\n        if(!loading && !optionExists(options, text)) {\n            setLoading(true);\n            autocompleteSymbol(\n                text,\n                ).then((response) => {\n                    const newOptions = autocompleteToOptions(response);\n                    setOptions((options) => concatOptions(options, newOptions));\n                    setLoading(false);\n                })\n            }\n\n    }\n\n    const {callback: handleSearch} = useDebouncedCallback(search, 1000)\n\n    return (\n        <Select \n        showSearch\n        placeholder=\"Type a sock symbol or company name\"\n        onSearch={handleSearch}\n        loading={loading}\n        options={options}\n        filterOption={(input, option: any) => {\n            if(insensitiveIncludes(option.label, input)) {\n                return option;\n            }\n            return false;\n        }}\n        {...props} \n        />\n    )\n}","import React, { useState } from 'react'\nimport { Button, DatePicker, Form } from 'antd'\nimport {SearchOutlined} from '@ant-design/icons';\nimport moment, { Moment } from 'moment';\nimport SymbolInput from '../symbol-input/SymbolInput';\n\nconst { RangePicker } = DatePicker;\nconst { Item, useForm } = Form;\n\nexport interface SearchFormData {\n    range: [moment.Moment, moment.Moment],\n    symbol: string\n}\n\nexport interface ConfigPanelProps {\n    onSubmit: (data: SearchFormData) => void\n    config: SearchFormData,\n    loading: boolean\n};\n\n\n\nexport default function ConfigPanel(props: ConfigPanelProps) {\n\n    const [form] = useForm<SearchFormData>();\n\n    const submitData = (data: SearchFormData) => {\n        props.onSubmit(data)\n        form.resetFields();\n    }\n\n    return (\n        <Form\n            className=\"config-form\"\n            layout=\"vertical\"\n            onFinish={submitData}\n            initialValues={props.config}\n            form={form}>\n            <Item \n                className=\"input-width\" \n                label=\"Stock\"\n                name=\"symbol\"\n            >\n                <SymbolInput />\n            </Item>\n            <Item \n                rules={[\n                    {\n                        validator(rule, [start, end]: [Moment, Moment]) {\n                            if(end.diff(start, 'days') < 3) {\n                                return Promise.reject(\"You should set a minimum interval of 3 days.\");\n                            }\n                            if(moment().isBefore(end)) {\n                                return Promise.reject(\"End date must be today or a day in the past.\")\n                            }\n                            return Promise.resolve();\n                        }\n                    }\n                ]}\n            label=\"Sample Interval\" name=\"range\">\n                <RangePicker\n                    showNow={false}\n                    showTime={false}\n                />\n            </Item>\n\n            <Button \n                icon={<SearchOutlined />} \n                type=\"primary\"\n                htmlType=\"submit\"\n                loading={props.loading}\n            >\n                Display Data\n            </Button>\n        </Form>\n    )\n}","import React, { useEffect, useReducer, useRef, useState } from 'react';\nimport { aggregateData } from './shared/utils';\nimport StockChart from './components/stock-chart/StockChart';\nimport { fetchQuotes } from './shared/requests';\nimport { Col, Row, Typography, Checkbox } from 'antd';\nimport ConfigPanel, { SearchFormData } from './components/config-panel/ConfigPanel';\nimport { QuoteInterval } from './shared/types';\nimport { ParentSize } from '@visx/visx';\nimport moment from 'moment';\n\nimport 'antd/dist/antd.css';\nimport './App.scss';\n\nconst { Text } = Typography;\n\nconst now = moment('2021-03-07 16:08:00');\n\nconst initialValues: SearchFormData = {\n  range: [moment(now).subtract(1, 'week'), now],\n  symbol: 'AMD'\n}\n\nconst getChartHeight = () => window.innerHeight * 0.7;\n\nconst flip = (state: boolean) => !state;\n\nfunction App() {\n  const [quotes, setQuotes] = useState<QuoteInterval[]>([]);\n  const [config, setConfig] = useState<SearchFormData>(initialValues);\n  const [displayAverages, changeDisplayAverages] = useReducer(flip, false);\n  const [loading, setLoading] = useState(true);\n\n  const chartContainer = useRef<HTMLDivElement | null>(null);\n\n\n\n  const fetchData = () => {\n    setLoading(true);\n    fetchQuotes({\n      period1: config.range[0].unix(),\n      period2: config.range[1].unix(),\n      symbol: config.symbol,\n      region: 'US'\n    }).then(data => {\n      setLoading(false);\n      setQuotes(aggregateData(config.range[0], config.range[1], data));\n    });\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, [config])\n\n  return (\n    <div>\n      <div className=\"header mr-auto ml-auto\">\n        <h2 className=\"p-0 m-0\">\n          Stock Statistics\n        </h2>\n      </div>\n      <div className=\"vertical-center full-page\">\n\n        <Row align=\"middle\">\n          <Col span={24} lg={8} xl={4}>\n            <ConfigPanel loading={loading} config={config} onSubmit={setConfig} />\n          </Col>\n          <Col span={24} lg={16} xl={20}>\n            <Row>\n              <Col span={24} ref={chartContainer}>\n                <ParentSize>\n                  {({ width }) => <StockChart width={width} height={window.innerHeight * 0.6} displayAverages={displayAverages} data={quotes} />\n                  }\n                </ParentSize>\n              </Col>\n              <Col className=\"text-center\" span={24}>\n                <label>\n                  <Text strong className=\"mr-small cursor-pointer\">\n                    Display Averages\n              </Text>\n                  <Checkbox value={displayAverages} onChange={changeDisplayAverages} />\n                </label>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}